From 24427c4a20dcacc0df7d097cf5e383a7bc3596fd Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Wed, 1 Feb 2017 18:21:44 +0100
Subject: [PATCH] Patched

---
 Setup.hs                            |  4 +---
 aclocal.m4                          | 19 -----------------
 configure.ac                        | 26 -----------------------
 java/Utils.java                     | 23 +++++++++++++++++++++
 lib/Data/Time/Clock/CTimespec.hs    | 21 +++++++++++++++++++
 lib/Data/Time/Clock/CTimespec.hsc   | 41 -------------------------------------
 lib/Data/Time/Clock/CTimeval.hs     | 10 ++++-----
 lib/Data/Time/Clock/POSIX.hs        |  2 +-
 lib/Data/Time/LocalTime/TimeZone.hs | 22 +++++++++-----------
 time.cabal                          | 37 +++++++++++++++++----------------
 10 files changed, 79 insertions(+), 126 deletions(-)
 delete mode 100644 aclocal.m4
 delete mode 100644 configure.ac
 create mode 100644 java/Utils.java
 create mode 100644 lib/Data/Time/Clock/CTimespec.hs
 delete mode 100644 lib/Data/Time/Clock/CTimespec.hsc

diff --git a/Setup.hs b/Setup.hs
index 54f57d6..00bfe1f 100644
--- a/Setup.hs
+++ b/Setup.hs
@@ -1,6 +1,4 @@
-module Main (main) where
-
 import Distribution.Simple
 
 main :: IO ()
-main = defaultMainWithHooks autoconfUserHooks
+main = defaultMain
diff --git a/aclocal.m4 b/aclocal.m4
deleted file mode 100644
index 86c1553..0000000
--- a/aclocal.m4
+++ /dev/null
@@ -1,19 +0,0 @@
-# FP_DECL_ALTZONE
-# ---------------
-# Defines HAVE_DECL_ALTZONE to 1 if declared, 0 otherwise.
-#
-# Used by base package.
-AC_DEFUN([FP_DECL_ALTZONE],
-[AC_REQUIRE([AC_HEADER_TIME])dnl
-AC_CHECK_HEADERS([sys/time.h])
-AC_CHECK_DECLS([altzone], [], [],[#if TIME_WITH_SYS_TIME
-# include <sys/time.h>
-# include <time.h>
-#else
-# if HAVE_SYS_TIME_H
-#  include <sys/time.h>
-# else
-#  include <time.h>
-# endif
-#endif])
-])# FP_DECL_ALTZONE
diff --git a/configure.ac b/configure.ac
deleted file mode 100644
index eacccf6..0000000
--- a/configure.ac
+++ /dev/null
@@ -1,26 +0,0 @@
-AC_INIT([Haskell time package], [1.7.0.1], [ashley@semantic.org], [time])
-
-# Safety check: Ensure that we are in the correct source directory.
-AC_CONFIG_SRCDIR([lib/include/HsTime.h])
-
-# These are to silence warnings with older Cabal versions
-AC_ARG_WITH([gcc],[Gnu C compiler])
-AC_ARG_WITH([compiler],[Haskell compiler])
-
-AC_PROG_CC()
-
-AC_USE_SYSTEM_EXTENSIONS
-
-AC_CONFIG_HEADERS([lib/include/HsTimeConfig.h])
-
-AC_CHECK_HEADERS([time.h])
-AC_CHECK_FUNCS([gmtime_r localtime_r])
-
-AC_CHECK_FUNCS([clock_gettime])
-
-AC_STRUCT_TM
-AC_STRUCT_TIMEZONE
-
-FP_DECL_ALTZONE
-
-AC_OUTPUT
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..8db3327
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,23 @@
+package ghcvm.time;
+
+import java.util.Date;
+import java.util.TimeZone;
+import java.util.Calendar;
+
+public class Utils {
+    public static int getTZOffset(long t) {
+        return TimeZone.getDefault().getOffset(t * 1000) / 1000;
+    }
+
+    public static boolean isDST(long t) {
+        return TimeZone.getDefault().inDaylightTime(new Date(t * 1000));
+    }
+
+    public static String getTZ() {
+        return TimeZone.getDefault().getDisplayName(false, TimeZone.SHORT);
+    }
+
+    public static long getCurrentTimeInSeconds() {
+        return Calendar.getInstance().getTimeInMillis() / 1000;
+    }
+}
diff --git a/lib/Data/Time/Clock/CTimespec.hs b/lib/Data/Time/Clock/CTimespec.hs
new file mode 100644
index 0000000..7803f0f
--- /dev/null
+++ b/lib/Data/Time/Clock/CTimespec.hs
@@ -0,0 +1,21 @@
+-- #hide
+module Data.Time.Clock.CTimespec where
+
+import Foreign
+import Foreign.C
+
+data CTimespec = MkCTimespec CTime CLong
+
+-- CTime represents the number of whole seconds of elapsed time.
+-- CLong represents the rest of elapsed time as number of nanoseconds
+-- Reference: https://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html
+
+foreign import java unsafe "@static ghcvm.time.Utils.getCurrentTimeInSeconds" getCurrentTimeInSeconds :: IO Int64
+
+-- | Get the current POSIX time from the system clock.
+getCTimespec :: IO CTimespec
+getCTimespec = do
+  curSeconds <- getCurrentTimeInSeconds
+  return $ MkCTimespec (fromIntegral curSeconds) (fromIntegral 0)
+
+
diff --git a/lib/Data/Time/Clock/CTimespec.hsc b/lib/Data/Time/Clock/CTimespec.hsc
deleted file mode 100644
index fb9aaa3..0000000
--- a/lib/Data/Time/Clock/CTimespec.hsc
+++ /dev/null
@@ -1,41 +0,0 @@
--- #hide
-module Data.Time.Clock.CTimespec where
-
-#include "HsTimeConfig.h"
-
-#if !defined(mingw32_HOST_OS) && HAVE_CLOCK_GETTIME
-
-#if __GLASGOW_HASKELL__ >= 709
-import Foreign
-#else
-import Foreign.Safe
-#endif
-import Foreign.C
-
-#include <time.h>
-
-data CTimespec = MkCTimespec CTime CLong
-
-instance Storable CTimespec where
-    sizeOf _ = #{size struct timespec}
-    alignment _ = alignment (undefined :: CLong)
-    peek p = do
-        s  <- #{peek struct timespec, tv_sec } p
-        ns <- #{peek struct timespec, tv_nsec} p
-        return (MkCTimespec s ns)
-    poke p (MkCTimespec s ns) = do
-        #{poke struct timespec, tv_sec } p s
-        #{poke struct timespec, tv_nsec} p ns
-
-foreign import ccall unsafe "time.h clock_gettime"
-    clock_gettime :: #{type clockid_t} -> Ptr CTimespec -> IO CInt
-
--- | Get the current POSIX time from the system clock.
-getCTimespec :: IO CTimespec
-getCTimespec = alloca (\ptspec -> do
-    throwErrnoIfMinus1_ "clock_gettime" $
-        clock_gettime #{const CLOCK_REALTIME} ptspec
-    peek ptspec
-    )
-
-#endif
diff --git a/lib/Data/Time/Clock/CTimeval.hs b/lib/Data/Time/Clock/CTimeval.hs
index 8c2d550..c42b0e9 100644
--- a/lib/Data/Time/Clock/CTimeval.hs
+++ b/lib/Data/Time/Clock/CTimeval.hs
@@ -24,13 +24,11 @@ instance Storable CTimeval where
         pokeElemOff (castPtr p) 0 s
         pokeElemOff (castPtr p) 1 mus
 
-foreign import ccall unsafe "time.h gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
+foreign import java unsafe "@static java.lang.System.currentTimeMillis" gettimeofday :: IO CLong
 
 -- | Get the current POSIX time from the system clock.
 getCTimeval :: IO CTimeval
-getCTimeval = with (MkCTimeval 0 0) (\ptval -> do
-    throwErrnoIfMinus1_ "gettimeofday" $ gettimeofday ptval nullPtr
-    peek ptval
-    )
-
+getCTimeval = do
+  t <- gettimeofday
+  return $ MkCTimeval (t `div` 1000) ((t `mod` 1000) * 1000)
 #endif
diff --git a/lib/Data/Time/Clock/POSIX.hs b/lib/Data/Time/Clock/POSIX.hs
index a7a3737..1b685dc 100644
--- a/lib/Data/Time/Clock/POSIX.hs
+++ b/lib/Data/Time/Clock/POSIX.hs
@@ -10,7 +10,7 @@ import Data.Time.Calendar.Days
 import Data.Fixed
 import Control.Monad
 
-#include "HsTimeConfig.h"
+-- #include "HsTimeConfig.h"
 
 #ifdef mingw32_HOST_OS
 import Data.Word    ( Word64)
diff --git a/lib/Data/Time/LocalTime/TimeZone.hs b/lib/Data/Time/LocalTime/TimeZone.hs
index 9381075..e6f60c1 100644
--- a/lib/Data/Time/LocalTime/TimeZone.hs
+++ b/lib/Data/Time/LocalTime/TimeZone.hs
@@ -16,6 +16,7 @@ module Data.Time.LocalTime.TimeZone
 import Data.Time.Calendar.Private
 import Data.Time.Clock.POSIX
 import Data.Time.Clock.UTC
+import Java.String
 
 #if __GLASGOW_HASKELL__ >= 709 || __GLASGOW_HASKELL__ < 702
 import Foreign
@@ -76,24 +77,21 @@ instance Show TimeZone where
 utc :: TimeZone
 utc = TimeZone 0 False "UTC"
 
-{-# CFILES cbits/HsTime.c #-}
-foreign import ccall unsafe "HsTime.h get_current_timezone_seconds" get_current_timezone_seconds :: CTime -> Ptr CInt -> Ptr CString -> IO CLong
+foreign import java unsafe "@static ghcvm.time.Utils.getTZOffset" getTZOffsetSeconds :: CTime -> IO Int
+foreign import java unsafe "@static ghcvm.time.Utils.isDST" isDST :: CTime -> IO Bool
+foreign import java unsafe "@static ghcvm.time.Utils.getTZ" getTZ :: IO JString
 
 posixToCTime :: POSIXTime -> CTime
 posixToCTime  = fromInteger . floor
 
 -- | Get the local time-zone for a given time (varying as per summertime adjustments)
 getTimeZone :: UTCTime -> IO TimeZone
-getTimeZone time = with 0 (\pdst -> with nullPtr (\pcname -> do
-    secs <- get_current_timezone_seconds (posixToCTime (utcTimeToPOSIXSeconds time)) pdst pcname
-    case secs of
-        0x80000000 -> fail "localtime_r failed"
-        _ -> do
-            dst <- peek pdst
-            cname <- peek pcname
-            name <- peekCString cname
-            return (TimeZone (div (fromIntegral secs) 60) (dst == 1) name)
-    ))
+getTimeZone time = do
+  let ctime = posixToCTime (utcTimeToPOSIXSeconds time) -- In seconds
+  secs <- getTZOffsetSeconds ctime
+  dst <- isDST ctime
+  cname <- getTZ
+  return $ TimeZone (secs `div` 60) dst (fromJString cname)
 
 -- | Get the current time-zone
 getCurrentTimeZone :: IO TimeZone
diff --git a/time.cabal b/time.cabal
index f85af97..c8f512a 100644
--- a/time.cabal
+++ b/time.cabal
@@ -10,26 +10,26 @@ bug-reports:    https://github.com/haskell/time/issues
 synopsis:       A time library
 description:    A time library
 category:       System
-build-type:     Configure
+build-type:     Simple
 cabal-version:  >=1.10
 tested-with:    GHC == 8.0.1, GHC == 7.10.3, GHC == 7.8.4
 x-follows-version-policy:
 
 extra-source-files:
     changelog.md
-    aclocal.m4
-    configure.ac
-    configure
+    -- aclocal.m4
+    -- configure.ac
+    -- configure
     lib/include/HsConfigure.h
     lib/include/HsTime.h
     lib/include/HsTimeConfig.h.in
     test/Test/*.c
     test/Test/*.h
 extra-tmp-files:
-    config.log
-    config.status
-    autom4te.cache
-    lib/include/HsTimeConfig.h
+    -- config.log
+    -- config.status
+    -- autom4te.cache
+    -- lib/include/HsTimeConfig.h
 
 source-repository head
     type:     git
@@ -52,8 +52,8 @@ library
     build-depends:
         base >= 4.7 && < 5,
         deepseq >= 1.1
-    if os(windows)
-        build-depends: Win32
+    -- if os(windows)
+    --     build-depends: Win32
     exposed-modules:
         Data.Time.Calendar,
         Data.Time.Calendar.MonthDay,
@@ -68,7 +68,8 @@ library
         Data.Time.Format,
         Data.Time
     default-extensions:    CPP
-    c-sources: lib/cbits/HsTime.c
+    -- c-sources: lib/cbits/HsTime.c
+    java-sources: java/Utils.java
     other-modules:
         Data.Time.Calendar.Private,
         Data.Time.Calendar.Days,
@@ -85,13 +86,13 @@ library
         Data.Time.Format.Parse
         Data.Time.Format.Locale
     include-dirs: lib/include
-    if os(windows)
-        install-includes:
-            HsTime.h
-    else
-        install-includes:
-            HsTime.h
-            HsTimeConfig.h
+    -- if os(windows)
+    --     install-includes:
+    --         HsTime.h
+    -- else
+    --     install-includes:
+    --         HsTime.h
+    --         HsTimeConfig.h
 
 test-suite ShowDefaultTZAbbreviations
     type: exitcode-stdio-1.0
-- 
2.11.0.windows.3

