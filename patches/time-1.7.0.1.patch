From cde19ea781fe1b00d2f542a2920a9377a942326f Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Sat, 8 Apr 2017 16:14:00 +0530
Subject: [PATCH] Patched

---
 Setup.hs                            |  2 +-
 java/Utils.java                     | 18 ++++++++++++++++
 lib/Data/Time/Clock/CTimespec.hs    | 40 ++++++++++++++++++++++++++++++++++++
 lib/Data/Time/Clock/CTimespec.hsc   | 41 -------------------------------------
 lib/Data/Time/Clock/CTimeval.hs     | 10 ++++-----
 lib/Data/Time/Clock/POSIX.hs        |  2 +-
 lib/Data/Time/Format/Parse.hs       | 14 ++++++-------
 lib/Data/Time/LocalTime/TimeZone.hs | 23 ++++++++++-----------
 time.cabal                          | 22 ++++++++++----------
 9 files changed, 93 insertions(+), 79 deletions(-)
 create mode 100644 java/Utils.java
 create mode 100644 lib/Data/Time/Clock/CTimespec.hs
 delete mode 100644 lib/Data/Time/Clock/CTimespec.hsc

diff --git a/Setup.hs b/Setup.hs
index 54f57d6..6fa548c 100644
--- a/Setup.hs
+++ b/Setup.hs
@@ -3,4 +3,4 @@ module Main (main) where
 import Distribution.Simple
 
 main :: IO ()
-main = defaultMainWithHooks autoconfUserHooks
+main = defaultMain
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..f09d618
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,18 @@
+package eta.time;
+
+import java.util.Date;
+import java.util.TimeZone;
+
+public class Utils {
+    public static int getTZOffset(long t) {
+        return TimeZone.getDefault().getOffset(t * 1000) / 1000;
+    }
+
+    public static boolean isDST(long t) {
+        return TimeZone.getDefault().inDaylightTime(new Date(t * 1000));
+    }
+
+    public static String getTZ() {
+        return TimeZone.getDefault().getDisplayName(false, TimeZone.SHORT);
+    }
+}
\ No newline at end of file
diff --git a/lib/Data/Time/Clock/CTimespec.hs b/lib/Data/Time/Clock/CTimespec.hs
new file mode 100644
index 0000000..7401da0
--- /dev/null
+++ b/lib/Data/Time/Clock/CTimespec.hs
@@ -0,0 +1,40 @@
+module Data.Time.Clock.CTimespec where
+
+-- #include "HsTimeConfig.h"
+
+#if !defined(mingw32_HOST_OS) && HAVE_CLOCK_GETTIME
+
+#if __GLASGOW_HASKELL__ >= 709
+import Foreign
+#else
+import Foreign.Safe
+#endif
+import Foreign.C
+
+#include <time.h>
+
+data CTimespec = MkCTimespec CTime CLong
+
+instance Storable CTimespec where
+    sizeOf _ = #{size struct timespec}
+    alignment _ = alignment (undefined :: CLong)
+    peek p = do
+        s  <- #{peek struct timespec, tv_sec } p
+        ns <- #{peek struct timespec, tv_nsec} p
+        return (MkCTimespec s ns)
+    poke p (MkCTimespec s ns) = do
+        #{poke struct timespec, tv_sec } p s
+        #{poke struct timespec, tv_nsec} p ns
+
+foreign import ccall unsafe "time.h clock_gettime"
+    clock_gettime :: #{type clockid_t} -> Ptr CTimespec -> IO CInt
+
+-- | Get the current POSIX time from the system clock.
+getCTimespec :: IO CTimespec
+getCTimespec = alloca (\ptspec -> do
+    throwErrnoIfMinus1_ "clock_gettime" $
+        clock_gettime #{const CLOCK_REALTIME} ptspec
+    peek ptspec
+    )
+
+#endif
diff --git a/lib/Data/Time/Clock/CTimespec.hsc b/lib/Data/Time/Clock/CTimespec.hsc
deleted file mode 100644
index fb9aaa3..0000000
--- a/lib/Data/Time/Clock/CTimespec.hsc
+++ /dev/null
@@ -1,41 +0,0 @@
--- #hide
-module Data.Time.Clock.CTimespec where
-
-#include "HsTimeConfig.h"
-
-#if !defined(mingw32_HOST_OS) && HAVE_CLOCK_GETTIME
-
-#if __GLASGOW_HASKELL__ >= 709
-import Foreign
-#else
-import Foreign.Safe
-#endif
-import Foreign.C
-
-#include <time.h>
-
-data CTimespec = MkCTimespec CTime CLong
-
-instance Storable CTimespec where
-    sizeOf _ = #{size struct timespec}
-    alignment _ = alignment (undefined :: CLong)
-    peek p = do
-        s  <- #{peek struct timespec, tv_sec } p
-        ns <- #{peek struct timespec, tv_nsec} p
-        return (MkCTimespec s ns)
-    poke p (MkCTimespec s ns) = do
-        #{poke struct timespec, tv_sec } p s
-        #{poke struct timespec, tv_nsec} p ns
-
-foreign import ccall unsafe "time.h clock_gettime"
-    clock_gettime :: #{type clockid_t} -> Ptr CTimespec -> IO CInt
-
--- | Get the current POSIX time from the system clock.
-getCTimespec :: IO CTimespec
-getCTimespec = alloca (\ptspec -> do
-    throwErrnoIfMinus1_ "clock_gettime" $
-        clock_gettime #{const CLOCK_REALTIME} ptspec
-    peek ptspec
-    )
-
-#endif
diff --git a/lib/Data/Time/Clock/CTimeval.hs b/lib/Data/Time/Clock/CTimeval.hs
index 8c2d550..f1130d0 100644
--- a/lib/Data/Time/Clock/CTimeval.hs
+++ b/lib/Data/Time/Clock/CTimeval.hs
@@ -24,13 +24,11 @@ instance Storable CTimeval where
         pokeElemOff (castPtr p) 0 s
         pokeElemOff (castPtr p) 1 mus
 
-foreign import ccall unsafe "time.h gettimeofday" gettimeofday :: Ptr CTimeval -> Ptr () -> IO CInt
+foreign import java unsafe "@static java.lang.System.currentTimeMillis" gettimeofday :: IO CLong
 
 -- | Get the current POSIX time from the system clock.
-getCTimeval :: IO CTimeval
-getCTimeval = with (MkCTimeval 0 0) (\ptval -> do
-    throwErrnoIfMinus1_ "gettimeofday" $ gettimeofday ptval nullPtr
-    peek ptval
-    )
+getCTimeval = do
+  t <- gettimeofday
+  return $ MkCTimeval (t `div` 1000) ((t `mod` 1000) * 1000)
 
 #endif
diff --git a/lib/Data/Time/Clock/POSIX.hs b/lib/Data/Time/Clock/POSIX.hs
index a7a3737..1b685dc 100644
--- a/lib/Data/Time/Clock/POSIX.hs
+++ b/lib/Data/Time/Clock/POSIX.hs
@@ -10,7 +10,7 @@ import Data.Time.Calendar.Days
 import Data.Fixed
 import Control.Monad
 
-#include "HsTimeConfig.h"
+-- #include "HsTimeConfig.h"
 
 #ifdef mingw32_HOST_OS
 import Data.Word    ( Word64)
diff --git a/lib/Data/Time/Format/Parse.hs b/lib/Data/Time/Format/Parse.hs
index 30b4705..220753a 100644
--- a/lib/Data/Time/Format/Parse.hs
+++ b/lib/Data/Time/Format/Parse.hs
@@ -7,7 +7,7 @@ module Data.Time.Format.Parse
     -- * UNIX-style parsing
 #if LANGUAGE_Rank2Types
     parseTimeM, parseTimeOrError, readSTime, readPTime,
-    parseTime, readTime, readsTime,
+    parseTime, readTime, -- readsTime,
 #endif
     ParseTime(..),
     -- * Locale
@@ -170,12 +170,12 @@ readTime :: ParseTime t =>
          -> t          -- ^ The time value.
 readTime = parseTimeOrError True
 
-{-# DEPRECATED readsTime "use \"readSTime True\" instead" #-}
-readsTime :: ParseTime t =>
-             TimeLocale -- ^ Time locale.
-          -> String     -- ^ Format string
-          -> ReadS t
-readsTime = readSTime True
+-- {-# DEPRECATED readsTime "use \"readSTime True\" instead" #-}
+-- readsTime :: ParseTime t =>
+--              TimeLocale -- ^ Time locale.
+--           -> String     -- ^ Format string
+--           -> ReadS t
+-- readsTime = readSTime True
 
 
 --
diff --git a/lib/Data/Time/LocalTime/TimeZone.hs b/lib/Data/Time/LocalTime/TimeZone.hs
index 9381075..af35fcd 100644
--- a/lib/Data/Time/LocalTime/TimeZone.hs
+++ b/lib/Data/Time/LocalTime/TimeZone.hs
@@ -17,6 +17,8 @@ import Data.Time.Calendar.Private
 import Data.Time.Clock.POSIX
 import Data.Time.Clock.UTC
 
+import Java.String
+
 #if __GLASGOW_HASKELL__ >= 709 || __GLASGOW_HASKELL__ < 702
 import Foreign
 #else
@@ -76,24 +78,21 @@ instance Show TimeZone where
 utc :: TimeZone
 utc = TimeZone 0 False "UTC"
 
-{-# CFILES cbits/HsTime.c #-}
-foreign import ccall unsafe "HsTime.h get_current_timezone_seconds" get_current_timezone_seconds :: CTime -> Ptr CInt -> Ptr CString -> IO CLong
+foreign import java unsafe "@static eta.time.Utils.getTZOffset" getTZOffsetSeconds :: CTime -> IO Int
+foreign import java unsafe "@static eta.time.Utils.isDST" isDST :: CTime -> IO Bool
+foreign import java unsafe "@static eta.time.Utils.getTZ" getTZ :: IO JString
 
 posixToCTime :: POSIXTime -> CTime
 posixToCTime  = fromInteger . floor
 
 -- | Get the local time-zone for a given time (varying as per summertime adjustments)
 getTimeZone :: UTCTime -> IO TimeZone
-getTimeZone time = with 0 (\pdst -> with nullPtr (\pcname -> do
-    secs <- get_current_timezone_seconds (posixToCTime (utcTimeToPOSIXSeconds time)) pdst pcname
-    case secs of
-        0x80000000 -> fail "localtime_r failed"
-        _ -> do
-            dst <- peek pdst
-            cname <- peek pcname
-            name <- peekCString cname
-            return (TimeZone (div (fromIntegral secs) 60) (dst == 1) name)
-    ))
+getTimeZone time = do
+  let ctime = posixToCTime (utcTimeToPOSIXSeconds time) -- In seconds
+  secs <- getTZOffsetSeconds ctime
+  dst <- isDST ctime
+  cname <- getTZ
+  return $ TimeZone (secs `div` 60) dst (fromJString cname)
 
 -- | Get the current time-zone
 getCurrentTimeZone :: IO TimeZone
diff --git a/time.cabal b/time.cabal
index f85af97..c2b5f63 100644
--- a/time.cabal
+++ b/time.cabal
@@ -10,7 +10,7 @@ bug-reports:    https://github.com/haskell/time/issues
 synopsis:       A time library
 description:    A time library
 category:       System
-build-type:     Configure
+build-type:     Simple
 cabal-version:  >=1.10
 tested-with:    GHC == 8.0.1, GHC == 7.10.3, GHC == 7.8.4
 x-follows-version-policy:
@@ -52,8 +52,8 @@ library
     build-depends:
         base >= 4.7 && < 5,
         deepseq >= 1.1
-    if os(windows)
-        build-depends: Win32
+    -- if os(windows)
+    --     build-depends: Win32
     exposed-modules:
         Data.Time.Calendar,
         Data.Time.Calendar.MonthDay,
@@ -68,7 +68,7 @@ library
         Data.Time.Format,
         Data.Time
     default-extensions:    CPP
-    c-sources: lib/cbits/HsTime.c
+    java-sources: java/Utils.java
     other-modules:
         Data.Time.Calendar.Private,
         Data.Time.Calendar.Days,
@@ -85,13 +85,13 @@ library
         Data.Time.Format.Parse
         Data.Time.Format.Locale
     include-dirs: lib/include
-    if os(windows)
-        install-includes:
-            HsTime.h
-    else
-        install-includes:
-            HsTime.h
-            HsTimeConfig.h
+    -- if os(windows)
+    --     install-includes:
+    --         HsTime.h
+    -- else
+    --     install-includes:
+    --         HsTime.h
+    --         HsTimeConfig.h
 
 test-suite ShowDefaultTZAbbreviations
     type: exitcode-stdio-1.0
-- 
2.7.4 (Apple Git-66)

